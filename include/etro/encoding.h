#ifndef __ETRO_ENCODING_H__
#define __ETRO_ENCODING_H__

#include <stddef.h>

/*----------------------------------------------------------
* Note: We're assuming that the endianess of floats, 
*       which we're also assuming is IEEE-754, 
*       has the same endianess as integers on the platform.
------------------------------------------------------------*/



/*************************************************************
* Encodes a number as little endian.
* 
* If the system is already little endian then **number** is just 
* copied into **encoded** with a pointer cast.
* 
* encoded's value is decoupled from **number** and therefore will not 
* have any unintended side effects 
* 
* @param[in]  number  is a ptr to a number to be encoded
* @param[out] encoded must have at least size bytes and will point to number in
* little endian order.
* @param[in]  size    is the size of the number of bytes "number" has
***************************************************************/
void encode_number(const void *const number, unsigned char *encoded, size_t size);

/******************************************************************************
* Converts a number as little endian (overwriting number)
* 
* If the system is already little endian then **number** is just cast to 
* and unsigned char. This is faster than **encode_number** but in the case
* the system is not little endian, number will have the wrong format and will
* not contain the same value passed in.
* 
* The returned pointer's lifetime is dependant upon number as it points to the same location.
* 
*
* The returned pointer points to **number** and therefore there may be unintended side effects
* when modifying its value. However this can also be of use, we use this to mdoify a 
* floating point number's binary representation in math.c
* 
* The returned pointer can also be passed into **decode_number** but again this will modify
* **number**
* 
* @param[in] number is a ptr to a number to be converted
* @param[in] size   is the size of the number of bytes **number** has.
* @return The returned pointer will live only as long as **number**
*         does (since it just points to it).
******************************************/
unsigned char* convert_number(void* number, size_t size);


/*************************************************************
* Decodes a number from little endian.
*
* If the system is already little endian then encoded returned
* unchanged. 
* Otherwise the data is converted to back into big endian. Note that is
* encoded was generated by **convert_number** then the **number** argument
* passed in will also be modified by this function as long as encoded
* still points to number (as would be the case in **convert_number**.
* 
* decode_number does almost exactly the same thing as convert number,
* its primarily for increased code readability, avoids one useless cast and
* is somewhat more type tidy.
*
* @param[in,out] encoded must have at least size bytes and its bytes will be
* translated back into the systems endianness.
* @param[in] size is the size of the number of bytes "number" has
***************************************************************/
void decode_number(unsigned char* encoded, size_t size);


#endif